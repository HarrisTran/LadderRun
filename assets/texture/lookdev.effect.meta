{
  "ver": "1.0.27",
  "uuid": "80b94780-7999-4842-91d8-2c4f9122a840",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec3 worldPos;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 mainColor;\nuniform float speed;\nuniform float distortion;\nvoid main () {\n  vec2 uv = v_uv0;\n  vec4 temp = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, uv*speed);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv*speed + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    temp.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    temp.a *= texture_tmp.a;\n  #else\n    temp *= texture_tmp;\n  #endif\n  uv += distortion * (0.5 - temp.rg);\n  vec4 textCol = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    textCol.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    textCol.a *= texture_tmp.a;\n  #else\n    textCol *= texture_tmp;\n  #endif\n  #endif\n  gl_FragColor = (mainColor*textCol).rgba;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec3 worldPos;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  vec4 mainColor;\n  float speed;\n  float distortion;\n};\nvoid main () {\n  vec2 uv = v_uv0;\n  vec4 temp = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, uv*speed);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv*speed + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    temp.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    temp.a *= texture_tmp.a;\n  #else\n    temp *= texture_tmp;\n  #endif\n  uv += distortion * (0.5 - temp.rg);\n  vec4 textCol = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    textCol.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    textCol.a *= texture_tmp.a;\n  #else\n    textCol *= texture_tmp;\n  #endif\n  #endif\n  gl_FragColor = (mainColor*textCol).rgba;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}